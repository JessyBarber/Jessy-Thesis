#include "Sender.h"

void setup() {
  // //Initialise Serial connection
  // Serial.begin(9600);
  // while (!Serial)
  //   ;
  // Serial.println("Starting Serial Success");
  // //Initialise LoRa connection
  // if (!LoRa.begin(915E6)) {
  //   Serial.println("Starting LoRa failed!");
  //   while (1)
  //     ;
  // }
  // Serial.println("LoRa Modem Started");
  //Initialise LoRa connection
  LoRa.begin(915E6);
  // LoRa.setFrequency(915E6);
}

void loop() {
  //FFT SAMPLING
  // double real_x_axis[sample_n]{};
  // double imag_x_axis[sample_n]{};
  // double real_y_axis[sample_n]{};
  // double imag_y_axis[sample_n]{};
  // double real_z_axis[sample_n]{};
  // double imag_z_axis[sample_n]{};

  axis x_axis, y_axis, z_axis;

  for (int i = 0; i < sample_n; i++) {
    x_axis.real_axis[i] = analogRead(xPin);
    y_axis.real_axis[i] = analogRead(yPin);
    z_axis.real_axis[i] = analogRead(zPin);
    delay(sample_interval);
  }

  //SAMPLE ACCEL DATA
  for (int i = 0; i < sample_n; i++) {
    x_axis.voltage = x_axis.real_axis[i] * vRef / (adc_resolution - 1);
    y_axis.voltage = y_axis.real_axis[i] * vRef / (adc_resolution - 1);
    z_axis.voltage = z_axis.real_axis[i] * vRef / (adc_resolution - 1);

    x_axis.Accel[i] = (x_axis.voltage - x_zero) / sensitivity;
    y_axis.Accel[i] = (y_axis.voltage - y_zero) / sensitivity;
    z_axis.Accel[i] = ((z_axis.voltage - z_zero) / sensitivity) - 1.0; // subtract Earth's gravity
  }

  // //COMPUTE FFT
  arduinoFFT xFFT(x_axis.Accel, x_axis.imag_axis, sample_n, sample_rate);
  arduinoFFT yFFT(y_axis.Accel, y_axis.imag_axis, sample_n, sample_rate);
  arduinoFFT zFFT(z_axis.Accel, z_axis.imag_axis, sample_n, sample_rate);

  xFFT.Windowing(window_type, FFT_dir);
  yFFT.Windowing(window_type, FFT_dir);
  zFFT.Windowing(window_type, FFT_dir);

  xFFT.Compute(FFT_dir);
  yFFT.Compute(FFT_dir);
  zFFT.Compute(FFT_dir);

  xFFT.ComplexToMagnitude();
  yFFT.ComplexToMagnitude();
  zFFT.ComplexToMagnitude();

  x_axis.setMaxIndex();
  y_axis.setMaxIndex();
  z_axis.setMaxIndex();

  x_axis.setFreq();
  y_axis.setFreq();
  z_axis.setFreq();



  // int maxIndexX = findMaxIndex(xAccel);
  // int maxIndexY = findMaxIndex(yAccel);
  // int maxIndexZ = findMaxIndex(zAccel);

  // double frequencyX = maxIndexX * ((double)sample_rate / (double)sample_n);
  // double frequencyY = maxIndexY * ((double)sample_rate / (double)sample_n);
  // double frequencyZ = maxIndexZ * ((double)sample_rate / (double)sample_n);

  // // Send Frequency, Acceleration & Displacement
  // // TRANSMIT LORA PACKET
  // LoRa.beginPacket();
  // // LoRa.write(buffer, packetSize);
  // LoRa.write((uint8_t*)&frequencyX, sizeof(frequencyX));
  // LoRa.write((uint8_t*)&frequencyY, sizeof(frequencyY));  
  // LoRa.write((uint8_t*)&frequencyZ, sizeof(frequencyZ));

  // // LoRa.write((uint8_t*)&maxAccelX, sizeof(maxAccelX));
  // // LoRa.write((uint8_t*)&maxAccelY, sizeof(maxAccelY));
  // // LoRa.write((uint8_t*)&maxAccelZ, sizeof(maxAccelZ));

  // // LoRa.write((uint8_t*)&maxDispX, sizeof(maxDispX));
  // // LoRa.write((uint8_t*)&maxDispY, sizeof(maxDispY));
  // // LoRa.write((uint8_t*)&maxDispZ, sizeof(maxDispZ));
  // LoRa.endPacket();


  



  // //ACCELERATION SAMPLING
  // double xAccel[sample_n] {};
  // double yAccel[sample_n] {};
  // double zAccel[sample_n] {};
  // double xAccelMSS[sample_n] {};
  // double yAccelMSS[sample_n] {};
  // double zAccelMSS[sample_n] {};

  // //VELOCITY SAPLING
  // double xVel[sample_n] {};
  // double yVel[sample_n] {};
  // double zVel[sample_n] {};

  // //DISPLACEMENT SAMPLING
  // double xDisp[sample_n] {};
  // double yDisp[sample_n] {};
  // double zDisp[sample_n] {};

  // //Sample interval in seconds for integration
  // double dt = sample_interval / 1000;

  // // long int t1 = millis();
  // //SAMPLE RAW DATA
  // for (int i = 0; i < sample_n; i++) {
  //   real_x_axis[i] = analogRead(x_axis);
  //   real_y_axis[i] = analogRead(y_axis);
  //   real_z_axis[i] = analogRead(z_axis);
  //   delay(sample_interval);
  // }
  // // long int t2 = millis();
  // // Serial.print("Time taken: "); Serial.print((t2-t1)/1000); Serial.println(" s");

  // //-------------------- DEBUGGING --------------------
  // //-------------------- DEBUGGING --------------------

  // //SAMPLE ACCEL DATA
  // for (int i = 0; i < sample_n; i++) {
  //   // xAccel[i] = (real_x_axis[i] * vRef / (adc_resolution - 1) - x_zero);
  //   // yAccel[i] = (real_y_axis[i] * vRef / (adc_resolution - 1) - y_zero);
  //   // zAccel[i] = (real_z_axis[i] * vRef / (adc_resolution - 1) - z_zero);

  //   double voltageX = real_x_axis[i] * vRef / (adc_resolution - 1);
  //   double voltageY = real_y_axis[i] * vRef / (adc_resolution - 1);
  //   double voltageZ = real_z_axis[i] * vRef / (adc_resolution - 1);

  //   xAccel[i] = (voltageX - x_zero) / sensitivity;
  //   yAccel[i] = (voltageY - y_zero) / sensitivity;
  //   zAccel[i] = ((voltageZ - z_zero) / sensitivity) - 1.0; // subtract Earth's gravity
  // }

  // //CONVERT ACCELERATION FROM G'S TO M/S/S
  // addGravity(xAccel, xAccelMSS);
  // addGravity(yAccel, yAccelMSS);
  // addGravity(zAccel, zAccelMSS);

  // // //REMOVE BIAS
  // // double accel_x_bias = findAvg(xAccel);
  // // double accel_y_bias = findAvg(yAccel);
  // // double accel_z_bias = findAvg(zAccel);

  // // removeBias(xAccel, accel_x_bias);
  // // removeBias(yAccel, accel_y_bias);
  // // removeBias(zAccel, accel_z_bias);
  // // Serial.println("Removed Bias");
  // //FIND VELOCITY
  // // integrate(xAccelMSS, dt, xVel);
  // // integrate(yAccelMSS, dt, yVel);
  // // integrate(zAccelMSS, dt, zVel);
  // // Serial.print("Integrated");
  // // //REMOVE DRIFT 
  // // double vel_x_drift = findAvg(xVel);
  // // double vel_y_drift = findAvg(yVel);
  // // double vel_z_drift = findAvg(zVel);

  // // removeBias(xVel, vel_x_drift);
  // // removeBias(yVel, vel_y_drift);
  // // removeBias(zVel, vel_z_drift);

  // // //FIND DISPLACEMENT
  // // integrate(xVel, dt, xDisp);
  // // integrate(yVel, dt, yDisp);
  // // integrate(zVel, dt, zDisp);

  // // //FIND MAX ACCELERATION VALS
  // // double maxAccelX = findMax(xAccelMSS);
  // // double maxAccelY = findMax(yAccelMSS);
  // // double maxAccelZ = findMax(zAccelMSS);

  // // //FIND MAX DISPLACEMENT VALS
  // // double maxDispX = findMax(xDisp);
  // // double maxDispY = findMax(yDisp);
  // // double maxDispZ = findMax(zDisp);

  // //COMPUTE FFT
  // arduinoFFT xFFT(xAccel, imag_x_axis, sample_n, sample_rate);
  // arduinoFFT yFFT(yAccel, imag_y_axis, sample_n, sample_rate);
  // arduinoFFT zFFT(zAccel, imag_z_axis, sample_n, sample_rate);

  // xFFT.Windowing(window_type, FFT_dir);
  // yFFT.Windowing(window_type, FFT_dir);
  // zFFT.Windowing(window_type, FFT_dir);

  // xFFT.Compute(FFT_dir);
  // yFFT.Compute(FFT_dir);
  // zFFT.Compute(FFT_dir);

  // xFFT.ComplexToMagnitude();
  // yFFT.ComplexToMagnitude();
  // zFFT.ComplexToMagnitude();

  // int maxIndexX = findMaxIndex(xAccel);
  // int maxIndexY = findMaxIndex(yAccel);
  // int maxIndexZ = findMaxIndex(zAccel);

  // double frequencyX = maxIndexX * ((double)sample_rate / (double)sample_n);
  // double frequencyY = maxIndexY * ((double)sample_rate / (double)sample_n);
  // double frequencyZ = maxIndexZ * ((double)sample_rate / (double)sample_n);

  // // Send Frequency, Acceleration & Displacement
  // // TRANSMIT LORA PACKET
  // LoRa.beginPacket();
  // // LoRa.write(buffer, packetSize);
  // LoRa.write((uint8_t*)&frequencyX, sizeof(frequencyX));
  // LoRa.write((uint8_t*)&frequencyY, sizeof(frequencyY));  
  // LoRa.write((uint8_t*)&frequencyZ, sizeof(frequencyZ));

  // // LoRa.write((uint8_t*)&maxAccelX, sizeof(maxAccelX));
  // // LoRa.write((uint8_t*)&maxAccelY, sizeof(maxAccelY));
  // // LoRa.write((uint8_t*)&maxAccelZ, sizeof(maxAccelZ));

  // // LoRa.write((uint8_t*)&maxDispX, sizeof(maxDispX));
  // // LoRa.write((uint8_t*)&maxDispY, sizeof(maxDispY));
  // // LoRa.write((uint8_t*)&maxDispZ, sizeof(maxDispZ));
  // LoRa.endPacket();
  // // delay(10000);
}

#ifndef Sender_h
#define Sender_h

#include "Arduino.h"
#include <algorithm>
#include <math.h>
#include <MKRWAN.h>
#include <arduinoFFT.h>
#include <LoRa.h>
#include <stdio.h>
#include <iostream> 

//FFT Function Values
#define window_type FFT_WIN_TYP_HAMMING
#define FFT_dir FFT_FORWARD
#define xPin A1
#define yPin A2
#define zPin A3

static const int adc_resolution = 4096; //12 BITS
static const double vRef = 3.3; //12 BITS

static const int sample_rate = 20; //Want to capture 2Hz then need at least 4Hz but x 10 to get 20Hz
static constexpr double sample_interval = ((1.0/sample_rate) * 1000);
static const uint16_t sample_n = 256; //MUST BE EXP 2
static constexpr double dt = sample_interval / 1000;

static const double sensitivity = 0.33; //330 mV/g at 3.3V
static const double x_zero = 0.386719;
static const double y_zero = 0.386719;
static const double z_zero = 0.134546;

class axis {
  private:
  public:
    double real_axis[sample_n] {};
    double imag_axis[sample_n] {};
    double Accel[sample_n] {};
    double AccelMSS[sample_n] {};
    double Vel[sample_n] {};
    double xDisp[sample_n] {};
    double voltage {};
    int maxIndex {};
    double frequency {};
    
    double findMax(double arr[]);
    void setMaxIndex();
    int findMaxIndex(double arr[]);
    void setFreq();
};
// x_axis.maxIndex = x_axis.findMaxIndex(x_axis.Accel);
// y_axis.maxIndex = y_axis.findMaxIndex(y_axis.Accel);
// z_axis.maxIndex = z_axis.findMaxIndex(z_axis.Accel);
// double frequencyX = maxIndexX * ((double)sample_rate / (double)sample_n);
double axis::findMax(double *arr) {
  return *std::max_element(arr, arr+sample_n);
}

void axis::setMaxIndex() {
  this->maxIndex = findMaxIndex(this->Accel);
}

int axis::findMaxIndex(double *arr) {
  int maxIndex = 1;
  for (int i = 1; i < sample_n / 2; i++) { // Only need to search the first half of the array
    if (arr[i] > arr[maxIndex]) {
      maxIndex = i;
    }
  }
  return maxIndex;
}

void axis::setFreq() {
  this->frequency = this->maxIndex * ((double)sample_rate / (double)sample_n);
}

// int findMaxIndex(double arr[]) {
//   int maxIndex = 1;
//   for (int i = 1; i < sample_n / 2; i++) { // Only need to search the first half of the array
//     if (arr[i] > arr[maxIndex]) {
//       maxIndex = i;
//     }
//   }
//   return maxIndex;
// }
  

// //---------- Accelerometer Values ----------
// const int x_axis = A1;
// const int y_axis = A2;
// const int z_axis = A3;
// const int adc_resolution = 4096; //12 BITS
const double g = 9.81;

// 3.3 V
// const double vRef = 3.3; //3.3V reference / supply
// const double sensitivity = 0.33; //330 mV/g at 3.3V
// const double x_zero = 0.386719;
// const double y_zero = 0.386719;
// const double z_zero = 0.134546;
// // 3.0 V 
// const double vRef = 3.0;
// const double sensitivity = 0.298125;
// const double x_zero = 0.151611;
// const double y_zero = 0.149414;
// const double z_zero = -0.120850;

//---------- Accelerometer Values ----------

//---------- FFT Values ----------
// const int sample_rate = 20; //Want to capture 2Hz then need at least 4Hz but x 10 to get 20Hz
// const uint16_t sample_n = 256; //MUST BE EXP 2
// const double sample_interval = ((1.0/sample_rate) * 1000); //Gives sample interval in milliseconds
//To sample for 10 seconds -> N = 10/T = 10/(1/20) = 200 sampleszx

//---------- FFT Values ----------

//---------- LoRa ----------
//Transmission Values 
const int packetSize = 3 * sizeof(double); //Sending three doubles 
//---------- LoRa ----------

//---------- Functions ----------
// //Sensor.cpp
// int readAxis(int axis);
// void printAxis(char label, int axis);

//FFT.cpp
// double findMax(double arr[]);
// // void lowPassFilter(double *input, double *output, int windowSize);
// void addGravity(const double arr[], double gravitized[]);
// int findMaxIndex(double arr[]);
// double findAvg(double arr[]);
// void removeBias(double arr[], double bias);
// void integrate(const double arr[], double dt, double integrated[]);
//---------- Functions ----------

#endif

// #include "Sender.h"

// double findMax(double arr[]) {
//   return *std::max_element(arr, arr+sample_n);
// }

// void addGravity(const double arr[], double gravitized[]) {
//   for (int i = 0; i < sample_n; i++) {
//     gravitized[i] = arr[i] * 9.81;
//   }
// }

// // void lowPassFilter(double *input, double *output, int windowSize) {
// //   for (int i = 0; i < sample_n; i++) {
// //     output[i] = 0;
// //     int count = 0;
// //     for (int j = i - windowSize; j <= i + windowSize; j++) {
// //       if (j >= 0 && j < sample_n) {
// //         output[i] += input[j];
// //         count++;
// //       }
// //     }
// //     output[i] /= count;
// //   }
// // }

// int findMaxIndex(double arr[]) {
//   int maxIndex = 1;
//   for (int i = 1; i < sample_n / 2; i++) { // Only need to search the first half of the array
//     if (arr[i] > arr[maxIndex]) {
//       maxIndex = i;
//     }
//   }
//   return maxIndex;
// }

// double findAvg(double arr[]) {
//   double sum = 0.0;
//   for (int i = 0; i < sample_n; i++) {
//     sum += arr[i];
//   }
//   return sum / sample_n;
// }

// void removeBias(double arr[], double bias) { 
//   for (int i = 0; i < sample_n; i++) {
//     arr[i] -= bias;
//   }
// }

// void integrate(const double arr[], double dt, double integrated[]) {
//   integrated[0] = arr[0] * dt;
//   for (int i = 1; i < sample_n; i++) {
//     integrated[i] = integrated[i - 1] + arr[i] * dt;
//   }
// }

